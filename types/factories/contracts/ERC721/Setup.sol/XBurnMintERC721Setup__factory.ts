/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  XBurnMintERC721Setup,
  XBurnMintERC721SetupInterface,
} from "../../../../contracts/ERC721/Setup.sol/XBurnMintERC721Setup";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint16",
        name: "chainId",
        type: "uint16",
      },
      {
        internalType: "address",
        name: "wormhole",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "finality",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "evmChainId",
        type: "uint256",
      },
    ],
    name: "setup",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061018e806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063b7ad3d5e14610030575b600080fd5b61004361003e36600461010a565b610045565b005b60008054600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff871617905561ffff861662ffffff19909116176201000060ff8516021790556100ac816100b2565b50505050565b4681146101055760405162461bcd60e51b815260206004820152601260248201527f696e76616c69642065766d436861696e49640000000000000000000000000000604482015260640160405180910390fd5b600455565b6000806000806080858703121561012057600080fd5b843561ffff8116811461013257600080fd5b9350602085013573ffffffffffffffffffffffffffffffffffffffff8116811461015b57600080fd5b9250604085013560ff8116811461017157600080fd5b939692955092936060013592505056fea164736f6c634300080a000a";

type XBurnMintERC721SetupConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: XBurnMintERC721SetupConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class XBurnMintERC721Setup__factory extends ContractFactory {
  constructor(...args: XBurnMintERC721SetupConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<XBurnMintERC721Setup> {
    return super.deploy(overrides || {}) as Promise<XBurnMintERC721Setup>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): XBurnMintERC721Setup {
    return super.attach(address) as XBurnMintERC721Setup;
  }
  override connect(signer: Signer): XBurnMintERC721Setup__factory {
    return super.connect(signer) as XBurnMintERC721Setup__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): XBurnMintERC721SetupInterface {
    return new utils.Interface(_abi) as XBurnMintERC721SetupInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): XBurnMintERC721Setup {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as XBurnMintERC721Setup;
  }
}
